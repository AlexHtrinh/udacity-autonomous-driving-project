import base64
import os

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
import socketio
import eventlet
import eventlet.wsgi
import pandas as pd
import numpy as np
from sklearn.utils import shuffle
from flask import Flask
from keras.models import load_model
from io import BytesIO
from PIL import Image
import cv2
import matplotlib.pyplot as plt


print('Setting up')


# In[3]:


sio = socketio.Server()
app = Flask(__name__)
maxSpeed = 30


# In[4]:


def preProcessing(img):
    img = img[60:135, :, :]
    img = cv2.cvtColor(img, cv2.COLOR_RGB2YUV)
    img = cv2.GaussianBlur(img, (3, 3), 0)
    img = cv2.resize(img, (200, 66))
    img = img / 255
    return img


# In[5]:


@sio.on('telemetry')
def telemetry(sid, data):
    speed = float(data['speed'])
    image = Image.open(BytesIO(base64.b64decode(data['image'])))
    image = np.asarray(image)
    image = preProcessing(image)
    image = np.asarray([image])
    steering = float(model.predict(image))
    throttle = 1.0 - speed / maxSpeed
    print('{} {} {}'. format(steering, throttle, speed))
    sendControl(steering, throttle)


# In[6]:


@sio.on('connect')
def connect(sid, environ):
    print('Connected')
    sendControl(0, 0)


# In[7]:


def sendControl(steering, throttle):
    sio.emit('steer', data={
        'steering_angle': steering.__str__(),
        'throttle': throttle.__str__()
    })


